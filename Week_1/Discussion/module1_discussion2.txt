Despite numerous challenges that may arise from using them, packages are, in many cases, necessary in programming. Packages save programmers time by allowing them to use code that has already been developed instead of writing the code themselves (https://www.udacity.com/blog/2021/01/what-is-a-python-package.html). Programmers may also find solutions to problems they are having through the use of packages; in CRAN, over 19,000 packages are available for R programming, meaning that there is plenty of quality code to build on while developing their projects (https://r-pkgs.org/introduction.html). The constraint of using packages is that it can hinder the reproducibility of the code. Packages may have different versions and dependencies, which can make expanding, modifying, and reproducing the code difficult for another programmer. One way to mitigate these issues is to track all packages used, their versions, and their dependencies (https://rviews.rstudio.com/2018/01/18/package-management-for-reproducible-r-code/). Additionally, check for system-specific dependencies to avoid issues when accessing the code on a different system (https://levelup.gitconnected.com/5-best-practices-for-reproducibility-in-code-one-rises-on-top-57972ad636ba). Another good practice may be to use standard, or commonly used, packages when possible (https://levelup.gitconnected.com/5-best-practices-for-reproducibility-in-code-one-rises-on-top-57972ad636ba). Using packages that are not only widely used but also frequently updated and maintained will allow better reproducibility and collaboration.